#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
       0                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     100                   # nInterval    Number of communication intervals, if > 0
  1.0000000000000000E-04   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       1                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  9.9999999999999998E-13   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
       0                   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(66,24)
l1
l2
c1
c2
c3
c4
c5
G.p.v
G.p.i
C1.v
C1.der(v)
C1.i
C1.n.v
C1.C
C2.v
C2.der(v)
C2.i
C2.C
C3.v
C3.der(v)
C3.i
C3.n.v
C3.C
C4.v
C4.der(v)
C4.i
C4.C
C5.v
C5.der(v)
C5.i
C5.n.v
C5.C
L1.v
L1.i
L1.der(i)
L1.L
L2.v
L2.i
L2.der(i)
L2.L
R1.R
R1.T_ref
R1.alpha
R1.v
R1.i
R1.p.v
R1.useHeatPort
R1.T
R1.LossPower
R1.R_actual
R2.R
R2.T_ref
R2.alpha
R2.i
R2.n.v
R2.useHeatPort
R2.T
R2.LossPower
R2.R_actual
V.V
V.n.v
V.offset
V.startTime
V.signalSource.height
V.signalSource.offset
V.signalSource.startTime

double initialValue(66,6)
 -1  1.3040000000000000E+00  0       0                  1  280   # l1
 -1  8.5860000000000003E-01  0       0                  1  280   # l2
 -1  1.0720000000000001E+00  0 1.0000000000000000E+100  1  280   # c1
  0       0                  0 1.0000000000000000E+100  6  256   # c2
 -1  1.6819999999999999E+00  0 1.0000000000000000E+100  1  280   # c3
  0       0                  0 1.0000000000000000E+100  6  256   # c4
 -1  7.2619999999999996E-01  0 1.0000000000000000E+100  1  280   # c5
  0       0                  0       0                  6  260   # G.p.v
  0       0                  0       0                  6  388   # G.p.i
 -1       0                  0       0                  2  280   # C1.v
  0       0                  0       0                  3  256   # C1.der(v)
  0       0                  0       0                  6  256   # C1.i
  0       0                  0       0                  6  260   # C1.n.v
  0       1                  0 1.0000000000000000E+100  6  256   # C1.C
  0       0                  0       0                  6  256   # C2.v
  0       0                  0       0                  6  256   # C2.der(v)
  0       0                  0       0                  6  256   # C2.i
  0       1                  0 1.0000000000000000E+100  6  256   # C2.C
 -1       0                  0       0                  2  280   # C3.v
  0       0                  0       0                  3  256   # C3.der(v)
  0       0                  0       0                  6  256   # C3.i
  0       0                  0       0                  6  260   # C3.n.v
  0       1                  0 1.0000000000000000E+100  6  256   # C3.C
  0       0                  0       0                  6  256   # C4.v
  0       0                  0       0                  6  256   # C4.der(v)
  0       0                  0       0                  6  256   # C4.i
  0       1                  0 1.0000000000000000E+100  6  256   # C4.C
 -1       0                  0       0                  2  280   # C5.v
  0       0                  0       0                  3  256   # C5.der(v)
  0       0                  0       0                  6  256   # C5.i
  0       0                  0       0                  6  260   # C5.n.v
  0       1                  0 1.0000000000000000E+100  6  256   # C5.C
  0       0                  0       0                  6  256   # L1.v
 -1       0                  0       0                  2  280   # L1.i
  0       0                  0       0                  3  256   # L1.der(i)
  0       1                  0       0                  6  256   # L1.L
  0       0                  0       0                  6  256   # L2.v
 -1       0                  0       0                  2  280   # L2.i
  0       0                  0       0                  3  256   # L2.der(i)
  0       1                  0       0                  6  256   # L2.L
 -1       1                  0       0                  1  280   # R1.R
 -1  3.0014999999999998E+02  0 1.0000000000000000E+100  1  280   # R1.T_ref
 -1       0                  0       0                  1  280   # R1.alpha
  0       0                  0       0                  6  256   # R1.v
  0       0                  0       0                  6  256   # R1.i
  0       0                  0       0                  6  324   # R1.p.v
  0       0                  0       0                  6  769   # R1.useHeatPort
  0  2.8814999999999998E+02  0 1.0000000000000000E+100  6  256   # R1.T
  0       0                  0       0                  6  256   # R1.LossPower
  0       0                  0       0                  6  256   # R1.R_actual
 -1       1                  0       0                  1  280   # R2.R
 -1  3.0014999999999998E+02  0 1.0000000000000000E+100  1  280   # R2.T_ref
 -1       0                  0       0                  1  280   # R2.alpha
  0       0                  0       0                  6  256   # R2.i
  0       0                  0       0                  6  260   # R2.n.v
  0       0                  0       0                  6  769   # R2.useHeatPort
  0  2.8814999999999998E+02  0 1.0000000000000000E+100  6  256   # R2.T
  0       0                  0       0                  6  256   # R2.LossPower
  0       0                  0       0                  6  256   # R2.R_actual
 -1       1                  0       0                  1  280   # V.V
  0       0                  0       0                  6  260   # V.n.v
 -1       0                  0       0                  1  280   # V.offset
 -1       1                  0       0                  1  280   # V.startTime
  0       0                  0       0                  6  256   # V.signalSource.height
  0       0                  0       0                  6  256   # V.signalSource.offset
  0       0                  0       0                  6  256   # V.signalSource.startTime


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(66,90)
filter coefficient I1 [H]
filter coefficient I2 [H]
filter coefficient c1 [F]
filter coefficient c2 [F]
filter coefficient c3 [F]
filter coefficient c4 [F]
filter coefficient c5 [F]
Potential at the pin [V]
Current flowing into the pin [A]
Voltage drop of the two pins (= p.v - n.v) [V]
der(Voltage drop of the two pins (= p.v - n.v)) [V/s]
Current flowing from pin p to pin n [A]
Potential at the pin [V]
Capacitance [F]
Voltage drop of the two pins (= p.v - n.v) [V]
der(Voltage drop of the two pins (= p.v - n.v)) [V/s]
Current flowing from pin p to pin n [A]
Capacitance [F]
Voltage drop of the two pins (= p.v - n.v) [V]
der(Voltage drop of the two pins (= p.v - n.v)) [V/s]
Current flowing from pin p to pin n [A]
Potential at the pin [V]
Capacitance [F]
Voltage drop of the two pins (= p.v - n.v) [V]
der(Voltage drop of the two pins (= p.v - n.v)) [V/s]
Current flowing from pin p to pin n [A]
Capacitance [F]
Voltage drop of the two pins (= p.v - n.v) [V]
der(Voltage drop of the two pins (= p.v - n.v)) [V/s]
Current flowing from pin p to pin n [A]
Potential at the pin [V]
Capacitance [F]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
der(Current flowing from pin p to pin n) [A/s]
Inductance [H]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
der(Current flowing from pin p to pin n) [A/s]
Inductance [H]
Resistance at temperature T_ref [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
Potential at the pin [V]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Resistance at temperature T_ref [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Current flowing from pin p to pin n [A]
Potential at the pin [V]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Height of step [V]
Potential at the pin [V]
Voltage offset [V]
Time offset [s]
Height of step [V]
Offset of output signal y [V]
Output y = offset for time < startTime [s]

